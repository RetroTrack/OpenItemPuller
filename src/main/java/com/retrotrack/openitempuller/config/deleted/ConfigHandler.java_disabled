package com.retrotrack.openitempuller.config;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.retrotrack.openitempuller.ItemPuller;
import net.fabricmc.loader.api.FabricLoader;

import java.io.*;
import java.nio.file.Path;
import java.util.HashMap;
import java.util.Map;

import static com.retrotrack.openitempuller.ItemPuller.MOD_ID;

public class ConfigHandler {

    // Method to create a new config file
    private static void createFile(File file) throws IOException {
        // Generate an empty config file
        FileWriter fileWriter = new FileWriter(file.getPath());
        fileWriter.write("{}");
        fileWriter.close();
    }

    // Method to load existing config files
    public static void loadFiles() {
        // Get the directory for config files
        Path path = FabricLoader.getInstance().getConfigDir();
        File file = path.resolve(MOD_ID).toFile();

        // Create the directory if it doesn't exist
        if (!file.exists()) file.mkdir();

        // Get list of files in the directory
        String[] names = file.list();
        if (names == null) return;

        // Load each config file
        for (String name : names) {
            loadFile(name);
        }
    }

    // Method to load config file
    public static void loadFile(String fileName) {
        Path path = FabricLoader.getInstance().getConfigDir();
        Path configPath = path.resolve(MOD_ID);
        File file = configPath.resolve(fileName).toFile();

        try {
            // Skip loading if the file is empty
            if (file.length() == 0) return;

            // Read the config file
            JsonObject root = (JsonObject) JsonParser.parseReader(new FileReader(file.getPath()));
            JsonObject jsonObject = root.getAsJsonObject();

            // Extract and set config values
            jsonObject.keySet().forEach(name -> {
                JsonObject jsonConfig = (JsonObject) jsonObject.get(name);
                Map<String, Object> properties = new HashMap<>();
                jsonConfig.entrySet().forEach(entry -> properties.put(entry.getKey(), entry.getValue().getAsBoolean()));
                ItemPuller.CONFIG = new ItemPullerConfig2(properties);
            });

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    // Method to save and edit a config file
    public static void saveFile(ItemPullerConfig2 config) {
        Path path = FabricLoader.getInstance().getConfigDir();
        Path configDirectoryPath = path.resolve(MOD_ID);
        File configFile = configDirectoryPath.resolve("config.json").toFile();

        try {
            if (configFile.length() == 0) createFile(configFile);

            String configFilePath = configFile.getPath();
            JsonObject root = (JsonObject) JsonParser.parseReader(new FileReader(configFilePath));
            root.add("config", config.getJsonFormat());

            FileWriter fileWriter = new FileWriter(configFilePath);
            fileWriter.write(root.toString());
            fileWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void createDefault() {
        Path path = FabricLoader.getInstance().getConfigDir();
        Path configDirectoryPath = path.resolve(MOD_ID);
        File filePath = path.resolve(MOD_ID).toFile();
        if (!filePath.exists()) filePath.mkdir();
        File configFile = configDirectoryPath.resolve("config.json").toFile();

        if (configFile.length() == 0) saveFile(ConfigFactory.getDefaultConfig());

        ConfigHandler.loadFile("config.json");
    }

}
